package #(baseModelPackageName);

import java.util.List;
import java.util.Map;

import com.jfinal.plugin.activerecord.Page;

import #(baseModelClassName);

/**
 * Generated by Solon.
 */
public interface BaseService<M extends #(baseModelSimpleName)<M>> {
    
    /**
     * 统计总记录数
     * 
     * @return 记录数
     */
    long count();

    /**
     * 根据 #(baseModelSimpleName) 统计满足条件的记录数
     * 
     * @param model #(baseModelSimpleName)实例
     * @return 记录数
     */
    long countBy(M model);

    /**
     * 根据 Map 统计满足条件的记录数
     * 
     * @param map Map参数表
     * @return 记录数
     */
    long countBy(Map<String, ?> map);

    /**
     * 根据 #(baseModelSimpleName) 删除满足条件的记录
     *
     * @param model #(baseModelSimpleName)实例
     * @return 记录数
     */
    long deleteBy(M model);

    /**
     * 根据 Map 删除满足条件的记录
     *
     * @param map 参数表
     * @return 记录数
     */
    long deleteBy(Map<String, ?> map);

    /**
     * 根据 ID 删除记录
     *
     * @param id ID
     * @return 记录数
     */
    boolean deleteById(Object id);

    /**
     * 根据多个 ID 批量删除记录
     *
     * @param ids ID列表
     * @return 记录数
     */
    boolean deleteByIds(Object... ids);

    /**
     * 查询所有记录
     * <p>数据量大时请谨慎使用</p>
     * 
     * @return #(baseModelSimpleName)对象列表
     */
    List<M> findAll();

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的记录列表
     * 
     * @param model #(baseModelSimpleName)实例
     * @return #(baseModelSimpleName) 对象列表
     */
    List<M> findBy(M model);

    /**
     * 根据 Map 查找满足条件的记录列表
     * 
     * @param map 参数表
     * @return #(baseModelSimpleName)对象列表
     */
    List<M> findBy(Map<String, ?> map);

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的记录列表
     * 
     * @param model #(baseModelSimpleName)实例
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return M对象列表
     */
    List<M> findBy(M model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找满足条件的记录列表,并按指定条件排序
     * 
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(baseModelSimpleName)对象列表
     */
    List<M> findBy(Map<String, ?> map, String orderColumn, String orderDirection);

    /**
     * 根据主键查找记录
     * 
     * @param id 主键
     * @return #(baseModelSimpleName) 对象
     */
    M findById(Object id);

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的单条记录
     *
     * @param model #(baseModelSimpleName)实例
     * @return M实例
     */
    M findFirstBy(M model);

    /**
     * 根据 Map 查找单条记录
     *
     * @param map 参数表
     * @return #(baseModelSimpleName)实例
     */
    M findFirstBy(Map<String, ?> map);

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的单条记录
     *
     * @param model #(baseModelSimpleName)实例
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return M实例
     */
    M findFirstBy(M model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找单条记录,并按指定条件排序
     *
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(baseModelSimpleName)对象
     */
    M findFirstBy(Map<String, ?> map, String orderColumn, String orderDirection);

    /**
     * 分页返回记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @return #(baseModelSimpleName)分页
     */
    Page<M> paginate(int pageNumber, int pageSize);

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param model #(baseModelSimpleName)实例
     * @return #(baseModelSimpleName)分页
     */
    Page<M> paginateBy(int pageNumber, int pageSize, M model);

    /**
     * 根据 Map 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param map 参数表
     * @return #(baseModelSimpleName)分页
     */
    Page<M> paginateBy(int pageNumber, int pageSize, Map<String, ?> map);

    /**
     * 根据 #(baseModelSimpleName) 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param model #(baseModelSimpleName)实例
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(baseModelSimpleName)分页
     */
    Page<M> paginateBy(int pageNumber, int pageSize, M model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找分页记录,并按指定条件排序
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(baseModelSimpleName)分页
     */
    Page<M> paginateBy(int pageNumber, int pageSize, Map<String, ?> map, String orderColumn, String orderDirection);

    /**
     * 保存 #(baseModelSimpleName) 记录
     * 
     * @param model #(baseModelSimpleName)实例
     * @return 保存数
     */
    boolean save(M model);

    /**
     * 批量保存 #(baseModelSimpleName)
     * 
     * @param list #(baseModelSimpleName)列表
     * @return 成功数
     */
    long saveMore(List<M> list);
    
    /**
     * 更新 #(baseModelSimpleName) 记录
     * 
     * @param model #(baseModelSimpleName)实例
     * @return 更新数
     */
    boolean update(M model);

    /**
     * 更新 #(baseModelSimpleName) 记录
     * 
     * @param #(baseModelSimpleName)实例
     * @return 更新数
     */
    long updateMore(List<M> list);
}
