package #(baseModelPackageName);

import #(baseModelClassName);
import com.jfinal.plugin.activerecord.IBean;

/**
 * Generated by Solon, please do not modify this file.
 */
#if(generateChainSetter)@SuppressWarnings({ "unchecked", "unused", "serial" })#else@SuppressWarnings({ "unused", "serial" })#end
public abstract class #(tableMeta.baseModelName)<M extends #(tableMeta.baseModelName)<M>> extends #(baseModelSimpleName)<M> implements IBean {

    /*
     * private 变量在 Getter 和 Setter 中没有被用到，之所以定义它们，是因为很多框架的自动注入需要
     * private 变量和 Setter 必须同时存在才能成功。
     */
#set(b = generateChainSetter)
#for(cm : tableMeta.columnMetas)
#set(argName = javaKeyword.contains(cm.attrName) ? '_' + cm.attrName : cm.attrName)
#if (cm.remarks)
    // #(cm.remarks)
#end
    private #(cm.javaType) #(argName);
#end


#for(cm : tableMeta.columnMetas)
	#if (cm.remarks)
	/**
	 * #(cm.remarks)
	 */
	#end
	#set(argName = javaKeyword.contains(cm.attrName) ? '_' + cm.attrName : cm.attrName)
	public #(b ? 'M' : 'void') set#(firstCharToUpperCase(cm.attrName))(#(cm.javaType) #(argName)) {
		set("#(cm.name)", #(argName));
		#if(b)
		return (M)this;
		#end
	}

    #if (cm.remarks)
    /**
     * #(cm.remarks)
     */
     #end
	#set(getterOfModel = getterTypeMap.get(cm.javaType))
	#if(isBlank(getterOfModel))
		#set(getterOfModel = 'get')
	#end
	public #(cm.javaType) get#(firstCharToUpperCase(cm.attrName))() {
		return #(getterOfModel)("#(cm.name)");
	}

#end
}

