package #(baseModelPackageName);#set(daoName = classPrefix + tableMeta.modelName + classSuffix)

import java.util.List;
import java.util.Map;

import org.noear.solon.extend.activerecord.annotation.Namespace;
import org.noear.solon.extend.activerecord.annotation.Sql;

import com.jfinal.plugin.activerecord.Page;

import #(modelPacket).#(tableMeta.modelName);

/**
 * Generated by Solon.
 */
@Namespace("#(daoName)")
public interface #(daoName) {
    
    /**
     * 统计总记录数
     * 
     * @return 记录数
     */
    @Sql("{ SELECT COUNT(*) FROM `#(tableMeta.name)` }")
    long count();

    /**
     * 根据 #(tableMeta.modelName) 统计满足条件的记录数
     * 
     * @param model #(tableMeta.modelName)实例
     * @return 记录数
     */
    @Sql("countBy")
    long countBy(#(tableMeta.modelName) model);

    /**
     * 根据 Map 统计满足条件的记录数
     * 
     * @param map Map参数表
     * @return 记录数
     */
    @Sql("countBy")
    long countBy(Map<?, ?> map);

    /**
     * 根据 #(tableMeta.modelName) 删除满足条件的记录
     *
     * @param model #(tableMeta.modelName)实例
     * @return 记录数
     */
    @Sql(value = "deleteBy", isUpdate = true)
    long deleteBy(#(tableMeta.modelName) model);

    /**
     * 根据 Map 删除满足条件的记录
     *
     * @param map 参数表
     * @return 记录数
     */
    @Sql(value = "deleteBy", isUpdate = true)
    long deleteBy(Map<?, ?> map);

    /**
     * 根据 ID 删除记录
     *
     * @param id ID
     * @return 记录数
     */
    @Sql(value = "{DELETE FROM `#(tableMeta.name)` WHERE `id` = #("#")para(id)}", isUpdate = true)
    long deleteById(Object id);

    /**
     * 根据多个 ID 批量删除记录
     *
     * @param ids ID列表
     * @return 记录数
     */
    @Sql(value = "{ DELETE FROM `#(tableMeta.name)` WHERE `id` IN #("#")para(ids, 'in') }", isUpdate = true)
    long deleteByIds(Object... ids);

    /**
     * 查找 #(tableMeta.name) 表全部记录
     * <p>数据量大时请谨慎使用</p>
     * 
     * @return #(tableMeta.modelName)对象列表
     */
    @Sql("{ SELECT * FROM `#(tableMeta.name)` }")
    List<#(tableMeta.modelName)> findAll();

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的记录列表
     * 
     * @param map model #(tableMeta.modelName)实例
     * @return #(tableMeta.modelName) 对象列表
     */
    @Sql("findBy")
    List<#(tableMeta.modelName)> findBy(#(tableMeta.modelName) model);

    /**
     * 根据 Map 查找满足条件的记录列表
     * 
     * @param map 参数表
     * @return #(tableMeta.modelName)对象列表
     */
    @Sql("findBy")
    List<#(tableMeta.modelName)> findBy(Map<?, ?> map);

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的记录列表
     * 
     * @param map model #(tableMeta.modelName)实例
     * @param orderColumn排序列名
     * @param orderDirection排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)对象列表
     */
    @Sql("findBy")
    List<#(tableMeta.modelName)> findBy(#(tableMeta.modelName) model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找满足条件的记录列表,并按指定条件排序
     * 
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)对象列表
     */
    @Sql("findBy")
    List<#(tableMeta.modelName)> findBy(Map<?, ?> map, String orderColumn, String orderDirection);

    /**
     * 根据 ID 查找记录
     * 
     * @param #(tableMeta.primaryKey) ID
     * @return #(tableMeta.modelName) 对象
     */
    @Sql("{ SELECT * FROM `#(tableMeta.name)` WHERE id = #("#")para(id)}")
    #(tableMeta.modelName) findById(Object #(tableMeta.primaryKey));

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的单条记录
     *
     * @param map model #(tableMeta.modelName)实例
     * @return #(tableMeta.modelName)实例
     */
    @Sql("findFirstBy")
    #(tableMeta.modelName) findFirstBy(#(tableMeta.modelName) model);

    /**
     * 根据 Map 查找单条记录
     *
     * @param map 参数表
     * @return #(tableMeta.modelName)实例
     */
    @Sql("findFirstBy")
    #(tableMeta.modelName) findFirstBy(Map<?, ?> map);

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的单条记录
     *
     * @param map model #(tableMeta.modelName) 实例
     * @param orderColumn 排序列名
     * @param orderDirection排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)实例
     */
    @Sql("findFirstBy")
    #(tableMeta.modelName) findFirstBy(#(tableMeta.modelName) model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找单条记录,并按指定条件排序
     *
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)对象
     */
    @Sql("findFirstBy")
    #(tableMeta.modelName) findFirstBy(Map<?, ?> map, String orderColumn, String orderDirection);

    /**
     * 分页返回记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @return #(tableMeta.modelName)对象分页
     */
    @Sql("{ SELECT * FROM `#(tableMeta.name)` }")
    Page<#(tableMeta.modelName)> paginate(int pageNumber, int pageSize);

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param model #(tableMeta.modelName)实例
     * @return #(tableMeta.modelName)对象分页
     */
    @Sql("paginateBy")
    Page<#(tableMeta.modelName)> paginateBy(int pageNumber, int pageSize, #(tableMeta.modelName) model);

    /**
     * 根据 Map 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param map 参数表
     * @return #(tableMeta.modelName)对象分页
     */
    @Sql("paginateBy")
    Page<#(tableMeta.modelName)> paginateBy(int pageNumber, int pageSize, Map<?, ?> map);

    /**
     * 根据 #(tableMeta.modelName) 查找满足条件的分页记录
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param model #(tableMeta.modelName)实例
     * @param orderColumn 排序列名
     * @param orderDirection排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)对象分页
     */
    @Sql("paginateBy")
    Page<#(tableMeta.modelName)> paginateBy(int pageNumber, int pageSize, #(tableMeta.modelName) model, String orderColumn, String orderDirection);

    /**
     * 根据 Map 查找分页记录,并按指定条件排序
     * 
     * @param pageNumber 起始值为1的页号
     * @param pageSize 页大小
     * @param map 参数表
     * @param orderColumn 排序列名
     * @param orderDirection 排序方向："asc" 正序，"desc" 倒序。如果为Null则默认为"asc"
     * @return #(tableMeta.modelName)对象分页
     */
    @Sql("paginateBy")
    Page<#(tableMeta.modelName)> paginateBy(int pageNumber, int pageSize, Map<?, ?> map, String orderColumn, String orderDirection);

    /**
     * 保存 #(tableMeta.modelName) 记录
     * 
     * @param model #(tableMeta.modelName)实例
     * @return 保存数
     */
    @Sql(value = "save", isUpdate = true)
    long save(#(tableMeta.modelName) model);

    /**
     * 更新 #(tableMeta.modelName) 记录
     * 
     * @param model #(tableMeta.modelName)实例
     * @return 更新数
     */
    @Sql(value = "update", isUpdate = true)
    long update(#(tableMeta.modelName) model);

}
